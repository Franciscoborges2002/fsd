/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.backend;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.security.InvalidKeyException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.swing.DefaultListModel;

public class PaginaMensagemPrivada extends javax.swing.JFrame {

    private Conexoes conectarServidor;
    private DefaultListModel defaultListModelMensagensPrivadas = new DefaultListModel();
    private AgenteUtilizador agenteUtilizadorComunicar;
    private final String SERVICE_NAME = "/mensagemPrivada";
    private MensagemPrivadaInterface mensagensPrivadas;
    private int jaEnviouRequest = 0;

    /**
     * Creates new form PaginaMensagemPrivada
     *
     * @param conectarServidor
     * @param agenteUtilizadorComunicar
     * @param jaEnviouRequest
     * @throws java.rmi.RemoteException
     */
    public PaginaMensagemPrivada(Conexoes conectarServidor, AgenteUtilizador agenteUtilizadorComunicar, int jaEnviouRequest) throws RemoteException {
        initComponents();
        this.conectarServidor = conectarServidor;
        this.agenteUtilizadorComunicar = agenteUtilizadorComunicar;
        this.jaEnviouRequest = jaEnviouRequest;
        defaultListModelMensagensPrivadas.add(0, "Mensagem Privada para " + agenteUtilizadorComunicar.getNomeUtilizadorAgenteUtilizador());
        listaMensagensPrivadas.setModel(defaultListModelMensagensPrivadas);

        conectarServidor.adicionarAgenteChatPrivado(this.agenteUtilizadorComunicar);

        System.out.println("iniciarCliente RMI");
        
        try {
            System.out.println("IP USARRRR " + agenteUtilizadorComunicar.getIpUtilizador().substring(1, agenteUtilizadorComunicar.getIpUtilizador().indexOf(":")));
            this.mensagensPrivadas = (MensagemPrivadaInterface) LocateRegistry.getRegistry(agenteUtilizadorComunicar.getIpUtilizador().substring(1, agenteUtilizadorComunicar.getIpUtilizador().indexOf(":"))).lookup(SERVICE_NAME);

                
        } catch (Exception e) {
            System.err.println("Error");
            e.printStackTrace();
        }

        if (jaEnviouRequest == 0) {//Verificar se j√° enviamos o abrir janela
            mensagensPrivadas.abrirJanela(conectarServidor.getDadosCliente().getNomeUtilziador());//Usar RMI para abrir uma janela no outro pc
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listaMensagensPrivadas = new javax.swing.JList<>();
        campoTextoMensagem = new javax.swing.JTextField();
        botaoEnviar = new javax.swing.JButton();
        botaoEnviarPrivada = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Mensagem Privada.");
        setAlwaysOnTop(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jScrollPane1.setViewportView(listaMensagensPrivadas);

        botaoEnviar.setText("Enviar");
        botaoEnviar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botaoEnviarMouseClicked(evt);
            }
        });

        botaoEnviarPrivada.setText("Enviar Privada");
        botaoEnviarPrivada.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botaoEnviarPrivadaMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(campoTextoMensagem)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(botaoEnviar, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(botaoEnviarPrivada, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoTextoMensagem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botaoEnviar)
                    .addComponent(botaoEnviarPrivada))
                .addContainerGap(11, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        //Parar a conversa do RMI
        //Mandar mensagem para lado oposto a dizer que este fechou o chat
        conectarServidor.removerAgenteChatPrivado(agenteUtilizadorComunicar);
    }//GEN-LAST:event_formWindowClosed

    private void botaoEnviarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botaoEnviarMouseClicked
        System.out.println(campoTextoMensagem.getText());
        try {
            defaultListModelMensagensPrivadas.add(defaultListModelMensagensPrivadas.getSize(), campoTextoMensagem.getText());
            mensagensPrivadas.enviarMensagem(defaultListModelMensagensPrivadas);//Enviar mensagem que tem na text box
            
            
            listaMensagensPrivadas.setModel(defaultListModelMensagensPrivadas);
            campoTextoMensagem.setText("");//Resetar o texto
        } catch (RemoteException ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_botaoEnviarMouseClicked

    private void botaoEnviarPrivadaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botaoEnviarPrivadaMouseClicked
        System.out.println("MEMSAGEM A ENVIAR ENCRIPTADA " + campoTextoMensagem.getText());
        try {
            //Criar Message Digest
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            md.update(campoTextoMensagem.getText().getBytes());
            byte[] digest = md.digest();
            
            System.out.println("DIGEST " + digest);

            Cipher cipher = Cipher.getInstance("RSA");
            cipher.init(Cipher.ENCRYPT_MODE, conectarServidor.getDadosCliente().getChavePrivada());
            cipher.update(digest);           

            byte[] cipherText = cipher.doFinal();
            
            System.out.println("CYPHER TEXT" + cipherText);

            String msgBase = Base64.getEncoder().encodeToString(cipherText);
            
            
            mensagensPrivadas.enviarMensagemSegura(campoTextoMensagem.getText(), msgBase);//Enviar mensagem que tem na text box
            
            System.out.println("MESSAGE BASE " + msgBase);
        } catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException ex) {
            Logger.getLogger(MensagemPrivada.class.getName()).log(Level.SEVERE, null, ex);
        }
        //Adicionado por causa do cipher
        //Adicionado por causa do cipher
         catch (RemoteException ex) {//Por causa de usar o metodo enviarMensageSegura
            Logger.getLogger(PaginaMensagemPrivada.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        campoTextoMensagem.setText("");//Resetar o texto
    }//GEN-LAST:event_botaoEnviarPrivadaMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoEnviar;
    private javax.swing.JButton botaoEnviarPrivada;
    private javax.swing.JTextField campoTextoMensagem;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> listaMensagensPrivadas;
    // End of variables declaration//GEN-END:variables
}
