/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.backend;

import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;

public class PaginaMensagemPrivada extends javax.swing.JFrame {

    private ConectarServidor conectarServidor;
    private DefaultListModel defaultListModelMensagensPrivadas = new DefaultListModel();
    private AgenteUtilizador agenteUtilizadorOposto;
    private final String SERVICE_NAME = "/PostPrivadoRemote";
    MensagemPrivadaInterface mensagensPrivadas;
    MensagemPrivadaInterface mp;

    /**
     * Creates new form PaginaMensagemPrivada
     */
    public PaginaMensagemPrivada(ConectarServidor conectarServidor, AgenteUtilizador agenteUtilizadorComunicar) throws RemoteException {
        initComponents();
        this.conectarServidor = conectarServidor;
        defaultListModelMensagensPrivadas.add(0, "Mensagem Privada para " + agenteUtilizadorComunicar.getNomeUtilizadorAgenteUtilizador());
        listaMensagensPrivadas.setModel(defaultListModelMensagensPrivadas);

        this.agenteUtilizadorOposto = agenteUtilizadorComunicar;
        conectarServidor.adicionarAgenteChatPrivado(this.agenteUtilizadorOposto);
        
        try {
            /*TODO: remove*/System.out.println("Ip a utilizar: " + agenteUtilizadorComunicar.getIpUtilizador().substring(1, agenteUtilizadorComunicar.getIpUtilizador().indexOf(":")));
            mensagensPrivadas = (MensagemPrivadaInterface) LocateRegistry.getRegistry(agenteUtilizadorComunicar.getIpUtilizador().substring(1, agenteUtilizadorComunicar.getIpUtilizador().indexOf(":"))).lookup(SERVICE_NAME);
        } catch (NotBoundException ex) {
            Logger.getLogger(PaginaMensagemPrivada.class.getName()).log(Level.SEVERE, null, ex);
        } catch (AccessException ex) {
            Logger.getLogger(PaginaMensagemPrivada.class.getName()).log(Level.SEVERE, null, ex);
        }
    
        iniciarMensagensPrivadas();
        receberMensagem.start();
        
        
    }

    private void bindRMI(MensagemPrivada mensagemPrivada) throws RemoteException {

        /*System.getProperties().put( "java.security.policy", "./server.policy");

		if( System.getSecurityManager() == null) {
			System.setSecurityManager(new SecurityManager());
		}*/
        try {
            LocateRegistry.createRegistry(1099);
        } catch (RemoteException e) {

        }
        try {
            LocateRegistry.getRegistry("127.0.0.1", 1099).rebind(SERVICE_NAME, mensagemPrivada);
        } catch (RemoteException e) {
            System.out.println("Registry not found");
        }
    }

    public void iniciarMensagensPrivadas() {
        MensagemPrivada mensagemPrivada = null;

        try {
            mensagemPrivada = new MensagemPrivada();
        } catch (RemoteException re) {//remoteError
            System.err.println("Error");
            re.printStackTrace();
        }

        try {
            bindRMI(mensagemPrivada);
        } catch (RemoteException re) {//remoteError
            System.err.println("Error");
            re.printStackTrace();
        }
    }
    
    Thread receberMensagem = new Thread(){
        public void run(){
            try {
                mp = new MensagemPrivada();
                
            
            } catch (Exception e) {
                System.out.println("ERRO REMOTE " + e);
            }
        }
    };
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listaMensagensPrivadas = new javax.swing.JList<>();
        campoTextoMensagem = new javax.swing.JTextField();
        botaoEnviar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Mensagem Privada.");
        setAlwaysOnTop(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jScrollPane1.setViewportView(listaMensagensPrivadas);

        botaoEnviar.setText("Enviar");
        botaoEnviar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botaoEnviarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(campoTextoMensagem, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botaoEnviar, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(campoTextoMensagem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoEnviar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        //Parar a conversa do RMI
        //Mandar mensagem para lado oposto a dizer que este fechou o chat
        System.out.println("A SAIIIIIRRR");
        conectarServidor.removerAgenteChatPrivado(agenteUtilizadorOposto);
    }//GEN-LAST:event_formWindowClosed

    private void botaoEnviarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botaoEnviarMouseClicked
        System.out.println(campoTextoMensagem.getText());
        try {
            mensagensPrivadas.enviarMensagem(campoTextoMensagem.getText());
        } catch (RemoteException ex) {
            Logger.getLogger(PaginaMensagemPrivada.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_botaoEnviarMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoEnviar;
    private javax.swing.JTextField campoTextoMensagem;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> listaMensagensPrivadas;
    // End of variables declaration//GEN-END:variables
}
