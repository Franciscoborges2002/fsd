/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.backend;

import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Andre
 */
public class PaginaChat extends javax.swing.JFrame {
    private Conexoes conectarServidor;
    
    public PaginaChat(Conexoes conectarServidor) {
        initComponents();
        this.conectarServidor = conectarServidor;
        threadAtualizar.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        EspacoTextoMensagem = new javax.swing.JTextField();
        botaoEnviarMensagem = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaPosts = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        listaAgenstesUtilizadores = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        botaoDesconectar = new javax.swing.JButton();
        botaoAtualizar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("chat");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        EspacoTextoMensagem.setToolTipText("Inserir mensagem a enviar");

        botaoEnviarMensagem.setText("Enviar");
        botaoEnviarMensagem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botaoEnviarMensagemMouseClicked(evt);
            }
        });

        jScrollPane1.setViewportView(listaPosts);

        listaAgenstesUtilizadores.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listaAgenstesUtilizadoresMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(listaAgenstesUtilizadores);

        jLabel1.setText("Utilizadores:");

        botaoDesconectar.setText("Desconectar");
        botaoDesconectar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botaoDesconectarMouseClicked(evt);
            }
        });

        botaoAtualizar.setText("Atualizar");
        botaoAtualizar.setToolTipText("Botão para forçar uma atualização");
        botaoAtualizar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botaoAtualizarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(EspacoTextoMensagem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botaoEnviarMensagem, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(botaoAtualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botaoDesconectar)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EspacoTextoMensagem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoEnviarMensagem))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botaoDesconectar)
                    .addComponent(botaoAtualizar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 6, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void botaoEnviarMensagemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botaoEnviarMensagemMouseClicked
        conectarServidor.enviarMensagem(EspacoTextoMensagem.getText());
        EspacoTextoMensagem.setText("");
    }//GEN-LAST:event_botaoEnviarMensagemMouseClicked

    private void botaoDesconectarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botaoDesconectarMouseClicked
        //DESCONECTAR DO SERVIDOR
        boxSair();
    }//GEN-LAST:event_botaoDesconectarMouseClicked

    private void botaoAtualizarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botaoAtualizarMouseClicked
        conectarServidor.sessionRequestForced();
    }//GEN-LAST:event_botaoAtualizarMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        boxSair();
    }//GEN-LAST:event_formWindowClosing

    private void listaAgenstesUtilizadoresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listaAgenstesUtilizadoresMouseClicked
        
        if(conectarServidor.getDadosCliente().getNomeUtilizadorAgenteUtilizador().equals(listaAgenstesUtilizadores.getSelectedValue())){//Se o nome que ele clicar for o do próprio utilizador
            
        }else{//Se não for
            AgenteUtilizador utilizadorMenPriv = conectarServidor.getSessaoConectada().getRepAgenteUtilizador().getAgenteByNome(listaAgenstesUtilizadores.getSelectedValue());
            
            if(conectarServidor.chatComUtilizador(utilizadorMenPriv)){//Jáa tem chat aberto com o utilziador
                JOptionPane.showMessageDialog(null, "Já tem chat privado com utilizador selecionado!", "Mensagem Privadas", JOptionPane.ERROR_MESSAGE);
            }else{
                if(utilizadorMenPriv.recebeMensagensPrivadas()){//Recebe mensagens privadas
                    int option = JOptionPane.showConfirmDialog(null, "Deseja enviar mensagem privada a " + listaAgenstesUtilizadores.getSelectedValue(), "Mensagem Privada", JOptionPane.YES_NO_OPTION);


                    if(option == 0){
                        try {
                            //O cliente quer enviar mensagem privada
                            PaginaMensagemPrivada pagina = new PaginaMensagemPrivada(conectarServidor, utilizadorMenPriv, 0);
                            pagina.setVisible(true);
                        } catch (RemoteException ex) {
                            Logger.getLogger(PaginaChat.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }else{//O cliente não quer enviar mensagem privada
                        return;
                    }
                }else{
                    JOptionPane.showMessageDialog(null, "Utilizador selecionado não quer receber mensagens privadas!", "Mensagem Privadas", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
        System.out.println(listaAgenstesUtilizadores.getSelectedValue());
    }//GEN-LAST:event_listaAgenstesUtilizadoresMouseClicked
    
    //Thread para atualizar a informação
    Thread threadAtualizar = new Thread(){
        public void run(){
            DefaultListModel defaultListModelAgentesUtilizadores = new DefaultListModel();
            DefaultListModel defaultListModelPosts = new DefaultListModel();
            ArrayList<String> agentesUtilizadores, posts;
            int i = 0;
            
            while(true){
                try {
                    agentesUtilizadores = conectarServidor.getNomesAgentesUtilizadores();
                    posts = conectarServidor.getPosts();
                    
                defaultListModelPosts.add(i, "Chat geral.");
                    
                    //For para adicionar post ao modelo
                    for(String post: posts){
                        defaultListModelPosts.add(i, post);
                        i++;
                    }
                    
                    //Adicionar mensagem inicial na lista
                    
                    i=0;
                    
                    //For para adicionar agenteUtilizador ao modelo
                    for(String agenteUtilizador: agentesUtilizadores){
                        defaultListModelAgentesUtilizadores.add(i, agenteUtilizador);
                        i++;
                    }
                    i=0;
                    
                    //Definir os modelos
                    listaAgenstesUtilizadores.setModel(defaultListModelAgentesUtilizadores);
                    listaPosts.setModel(defaultListModelPosts);
                    
                    //Por a thread a dormir
                    this.sleep(3000);
                    
                    //Dar clear ao que tem na lista dos utilizadores e posts
                    defaultListModelAgentesUtilizadores.clear();
                    defaultListModelPosts.clear();
                } catch (InterruptedException ex) {
                    Logger.getLogger(PaginaChat.class.getName()).log(Level.SEVERE, null, ex);
                }
          }
        }
    };
   
    private void boxSair(){
        int option = JOptionPane.showConfirmDialog(null, "Quere mesmo sair do chat?", "Seleciona", JOptionPane.YES_NO_OPTION);
        
        if(option == 0){//O cliente quer sair
                    
            try{
                conectarServidor.desconectarServidor();


            }catch(Exception e){
                JOptionPane.showMessageDialog(null, e,"ERROR!", JOptionPane.ERROR_MESSAGE);
            }

            System.exit(0);
        }else{
            return;
        }
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField EspacoTextoMensagem;
    private javax.swing.JButton botaoAtualizar;
    private javax.swing.JButton botaoDesconectar;
    private javax.swing.JButton botaoEnviarMensagem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> listaAgenstesUtilizadores;
    private javax.swing.JList<String> listaPosts;
    // End of variables declaration//GEN-END:variables
}

